#ifndef __MEMORY_H_
#define __MEMORY_H_

#include "../include/stdint.h"
#include "../drivers/screen.h"
#include "../libc/common.h"

typedef struct {
	unsigned char status;
	unsigned size;
} alloc_t;

void* memset (void * ptr, int value, int num);
void* memcpy(const void* dest, const void* src, int count);

void mm_init();
void mm_print_out();

char* malloc(unsigned size);
void free(void *mem);

#endif
-------------------------------------------------------------------------
#include "mem.h"

#define MAX_PAGE_ALIGNED_ALLOCS 32

unsigned last_alloc = 0;
unsigned heap_end = 0;
unsigned heap_begin = 0;
unsigned memory_used = 0;

void* memset (void * ptr, int value, int num )
{
	unsigned char* p=ptr;
	while(num--)
		*p++ = (unsigned char)value;
	return ptr;
}

void* memcpy(const void* dest, const void* src, int count)
{
	char* dst8 = (char*)dest;
	char* src8 = (char*)src;

	if (count & 1) {
		dst8[0] = src8[0];
		dst8 += 1;
		src8 += 1;
	}

	count /= 2;
	while (count--) {
		dst8[0] = src8[0];
		dst8[1] = src8[1];

		dst8 += 2;
		src8 += 2;
	}
	return (void*)dest;
}

void mm_init(unsigned kernel_end)
{
	kprintf("The kernel end is: %d\n", kernel_end);
	last_alloc = kernel_end + 0x1000;	// Set our starting point.
	heap_begin = last_alloc;
	heap_end = 0x5B8D80;				// Set the bar to 6 MB
	memset((char *)heap_begin, 0, heap_end - heap_begin);
}

void mm_print_out()
{
	kprintf("Memory used: %d bytes\n", memory_used);
	kprintf("Memory free: %d bytes\n", heap_end - heap_begin - memory_used);
	kprintf("Heap size: %d bytes\n", heap_end - heap_begin);
	kprintf("Heap start: 0x%x\n", heap_begin);
	kprintf("Heap end: 0x%x\n", heap_end);
}

void free(void *mem)
{
	alloc_t *alloc = (mem - sizeof(alloc_t));
	memory_used -= alloc->size + sizeof(alloc_t);
	alloc->status = 0;
}

char* malloc(unsigned size)
{
	if(!size) return 0;

	/* Loop through blocks and find a block sized the same or bigger */
	unsigned char *mem = (unsigned char *)heap_begin;
	while((unsigned)mem < last_alloc)
	{
		alloc_t *a = (alloc_t *)mem;
		/* If the alloc has no size, we have reaced the end of allocation */

		if(!a->size)
			goto nalloc;
		/* If the alloc has a status of 1 (allocated), then add its size
		 * and the sizeof alloc_t to the memory and continue looking.
		 */
		if(a->status) {
			mem += a->size;
			mem += sizeof(alloc_t);
			mem += 4;
			continue;
		}
		/* If the is not allocated, and its size is bigger or equal to the
		 * requested size, then adjust its size, set status and return the location.
		 */
		if(a->size >= size)
		{
			/* Set to allocated */
			a->status = 1;
			memset(mem + sizeof(alloc_t), 0, size);
			memory_used += size + sizeof(alloc_t);
			return (char *)(mem + sizeof(alloc_t));
		}
		/* If it isn't allocated, but the size is not good, then
		 * add its size and the sizeof alloc_t to the pointer and
		 * continue;
		 */
		mem += a->size;
		mem += sizeof(alloc_t);
		mem += 4;
	}

	nalloc:;
	if(last_alloc+size+sizeof(alloc_t) >= heap_end)
	{
		panic("From Memory.c", "Something", 0);
	}
	alloc_t *alloc = (alloc_t *)last_alloc;
	alloc->status = 1;
	alloc->size = size;

	last_alloc += size;
	last_alloc += sizeof(alloc_t);
	last_alloc += 4;

	memory_used += size + 4 + sizeof(alloc_t);
	memset((char *)((unsigned)alloc + sizeof(alloc_t)), 0, size);
	return (char *)((unsigned)alloc + sizeof(alloc_t));

}
