#ifndef KHEAP_H
#define KHEAP_H

#include "../include/stdint.h"
#include "../drivers/screen.h"

void memset(int *dest, int val, int len);
void memory_copy(unsigned char *source, unsigned char *destination, int bytes);
int * malloc();
void heap_install();
int find_memory_hole();
void free(void * pointer);

#endif

------------------------------------------------------------------------------------------------------

#include "mem.h"

int starting_address;
int ending_address;
int max_memory_address;
int total_elements;

struct heap_elements {
    int start_address;
    int end_address;
    int size;
    int reservation;
};

struct heap_elements heap[25];

// Write len copies of val into dest.
void memset(int *dest, int val, int len)
{
    int *temp = (int *)dest;
    for ( ; len != 0; len--) *temp++ = val;
}

/*
 * This function will take a source and destination and copy n amount
 * - of bytes from the source to the destination address. 
 */ 
void memory_copy(unsigned char *source, unsigned char *destination, int bytes) {
    for (int i = 0; i < bytes; i++) {
        *(destination + i) = *(source + i);
    }
}

int find_memory_hole(int size) {

    for (int i = 0; i < total_elements; i++) {
        if (heap[i].reservation == 0) {
            if (heap[i].size >= size || heap[i].size == 0) {
              return i;
            }
        }
    }
    return -1;
}

int * malloc(int size) {   
    int hole = find_memory_hole(size);
    if (hole != -1) {
        if (heap[hole].start_address == 0) {
            heap[hole].start_address = ending_address;
            ending_address += size;
            heap[hole].end_address = ending_address;
            heap[hole].size = size;
            heap[hole].reservation = 1;
            kprintf("Starting address: %d\n", heap[hole].start_address);
            kprintf("Ending address: %d\n", heap[hole].end_address);
        } else {
            heap[hole].size = size;
            heap[hole].reservation = 1;
        }
        memset((int*)heap[hole].start_address, 0, size);
        return (int*)heap[hole].start_address;
    } else {
        kprintf("FREE SOME MEMORY~!\n");
        kprintf("WE NEED ROOM IN HERE~!\n");
        return 0;
    }
}

void heap_install() {
    total_elements = 25;
    starting_address = 0x100000;  // 1 - MB
    ending_address = 0x100000;    // 1 - MB
    max_memory_address = 0xEEE00000;  // 4 - GB

    for (int i = 0; i < total_elements; i++) {
        heap[i].start_address = 0;
        heap[i].end_address = 0;
        heap[i].size = 0;
        heap[i].reservation = 0;
    }

    return;
}

void free(void * pointer) {

    int memory_found = 0;
    kprintf("Address %d\n", &pointer);
    int memory_address = &pointer;
    
    for (int i = 0; i < total_elements; i++) {
        if (heap[i].start_address == memory_address) {
            heap[i].size = 0;
            heap[i].reservation = 0;
            memory_found = 1;
            break;
        }
    }

    if (memory_found == 0)
        kprintf("Memory could not bee free'd (NOT FOUND).\n");

    return;
}